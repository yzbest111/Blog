虚拟滚动（可视区域渲染）

公司中台业务以ElementUI为UI库，在大数据量情况下，会造成表格卡顿。当然，是在表格没有分页的场景下，而虚拟滚动这种解决方案正好完美契合业务场景。
其实，最后的实现方案只能说是虚拟滚动的一个变种，确切的说应该是只渲染可视区域。可视区域渲染指的是只渲染可视区域的列表项，非可见区域的完全不渲染，在滚动条滚动时动态更新列表项。
下面举一个简单对例子说明虚拟滚动的原理，不说废话，直接上代码，各中奥妙，请看代码理解：

<template>
  <div class="list-view" @scroll="handleScroll($event)">
    <div class="list-view-phantom" :style="{ height: data.length * 30 + 'px' }"></div>
    <div v-el:content class="list-view-content">
      <div class="list-view-item" v-for="item in visibleData">{{ item.value }}</div>
    </div>
  </div>
</template>

<script>
  export default {
    props: {
      data: {
        type: Array
      },

      itemHeight: {
        type: Number,
        default: 30
      }
    },
​
    ready() {
      this.visibleCount = Math.ceil(this.$el.clientHeight / this.itemHeight);
      this.start = 0;
      this.end = this.start + this.visibleCount;
      this.visibleData = this.data.slice(this.start, this.end);
    },
​
    data() {
      return {
        start: 0,
        end: null,
        visibleCount: null,
        visibleData: [],
        scrollTop: 0
      };
    },
    methods: {
      handleScroll(event) {
        const scrollTop = this.$el.scrollTop;
        const fixedScrollTop = scrollTop - scrollTop % 30;
        this.$els.content.style.webkitTransform = `translate3d(0, ${fixedScrollTop}px, 0)`;
​
        this.start = Math.floor(scrollTop / 30);
        this.end = this.start + this.visibleCount;
        this.visibleData = this.data.slice(this.start, this.end);
      }
    }
  };
</script>

<style>
  .list-view {
    height: 400px;
    overflow: auto;
    position: relative;
    border: 1px solid #666;
  }
​
  .list-view-phantom {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    z-index: -1;
  }
​
  .list-view-content {
    left: 0;
    right: 0;
    top: 0;
    position: absolute;
  }
​
  .list-view-item {
    padding: 5px;
    color: #666;
    height: 30px;
    line-height: 30px;
    box-sizing: border-box;
  }
</style>
----------------------------------------------------------------------------
在el-table基础上实现可视区域渲染，将其封装成了一个自定义指令，代码如下：

// 设置默认渲染数量
const defaultDataSize = 10

// 设置隐藏函数
let timeout = null
const setRowDisableNone = function(topNum, showRowNum, binding) {
  if (timeout) clearTimeout(timeout)
  timeout = setTimeout(() => { // 返回startIndex和endIndex
    binding.value.call(null, topNum, topNum + showRowNum + defaultDataSize)
  })
}

export default {
    name: 'virtual-scroll',
    componentUpdated: function(el, binding, vnode, oldVnode) {
        setTimeout(() => {
            const dataSize = vnode.data.attrs["data-size"]
            const oldDataSize = oldVnode.data.attrs["data-size"]
            if (dataSize === oldDataSize) return false
            const scrollTableWrap = el.querySelector(".el-table__body-wrapper") // 外层滚动DOM
            const targetTbody = scrollTableWrap.querySelector("table tbody") // 被包裹的表格
            const targetRow = scrollTableWrap.querySelector("table tr") // 行
            if (!targetRow) return false

            const rowHeight = targetRow.clientHeight // 行高
            const showRowNum = Math.round(scrollTableWrap.clientHeight / rowHeight) // 四舍五入计算可视区域显示的条数

            const createElementTR = document.createElement("tr") // 生成用于撑开数据量的DOM
            const createElementTRHeight = (dataSize - showRowNum - defaultDataSize) * rowHeight // 最大高度

            createElementTR.setAttribute("style",`height: ${createElementTRHeight}px;`)
            targetTbody.append(createElementTR)

            // 监听滚动事件
            scrollTableWrap.addEventListener("scroll", function() {
                let topPx = this.scrollTop - defaultDataSize * rowHeight
                let topNum = Math.round(topPx / rowHeight)
                let minTopNum = dataSize - defaultDataSize - showRowNum
                if (topNum > minTopNum) topNum = minTopNum
                if (topNum < 0) {
                    topNum = 0
                    topPx = 0
                }
                // 设置偏移量
                targetTbody.setAttribute("style",`transform: translate3D(0, ${topPx}px, 0)`)
                createElementTR.setAttribute("style",`height: ${(createElementTRHeight - topPx) > 0 ? (createElementTRHeight - topPx) : 0}px;`)

                setRowDisableNone(topNum, showRowNum, binding)
            })
        })
    }
}


​
